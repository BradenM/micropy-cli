name: Test MicropyCli

on:
    pull_request: ~
    push:
        branches:
            - master

env:
    POETRY_VERSION: 1.2.1
    POETRY_URL: https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py

concurrency:
    group: main-${{ github.event_name }}-${{ github.ref }}
    cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
    test:
        name: ${{ matrix.os }} @ Py v${{ matrix.python }}
        runs-on: ${{ matrix.os }}
        env:
            OS: ${{ matrix.os }}
            PYTHON: ${{ matrix.python }}
        strategy:
            fail-fast: false
            matrix:
                os: [windows-latest, macOS-latest, ubuntu-latest]
                python: ["3.7", "3.8", "3.9", "3.10"]

        steps:
            - uses: actions/checkout@v2.5.0
              with:
                  submodules: true

            # Poetry cache depends on OS, Python version and Poetry version.
            - name: Cache Poetry cache
              uses: actions/cache@v2
              with:
                  path: ~/.cache/pypoetry
                  key: poetry-cache-${{ runner.os }}-${{ matrix.python }}-${{ env.POETRY_VERSION }}

            # virtualenv cache should depends on OS, Python version and `poetry.lock` (and optionally workflow files).
            - name: Cache Packages
              uses: actions/cache@v2
              with:
                  path: ~/.local
                  key: poetry-${{ runner.os }}-${{ matrix.python }}-${{ hashFiles('**/poetry.lock') }}-${{ hashFiles('.github/workflows/*.yml') }}

            - name: Set up Python ${{ matrix.python }}
              uses: actions/setup-python@v2
              with:
                  python-version: ${{ matrix.python }}

            - name: Install Poetry
              run: |
                  curl -sSL ${{ env.POETRY_URL }} | python - --version ${{ env.POETRY_VERSION }}
                  echo "$HOME/.local/bin" >> $GITHUB_PATH

            - name: Setup Win Path
              if: matrix.os == 'windows-latest'
              shell: pwsh
              run: echo "C:\Users\runneradmin\AppData\Roaming\Python\Scripts" | Out-File -FilePath $env:GITHUB_PATH -Append

            - name: Install Dependencies
              run: poetry install --with docs --with test -v

            - name: Run Tests
              run: poetry run pytest --cov --cov-config=pyproject.toml --junit-xml=test_log.xml --cov-report=xml:cov.xml -vv -ra -n0

            - name: Upload Codecov
              uses: codecov/codecov-action@v2
              with:
                files: ./cov.xml
                fail_ci_if_error: true
                flags: unittests
                env_vars: OS,PYTHON
